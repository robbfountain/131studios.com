<?php

namespace App;

use Spatie\Tags\HasTags;
use Illuminate\Support\Str;
use JD\Cloudder\Facades\Cloudder;
use Illuminate\Support\Facades\Auth;
use Thujohn\Twitter\Facades\Twitter;
use Illuminate\Database\Eloquent\Model;

/**
 * Class Blog
 *
 * @package App
 */
class Blog extends Model
{
    use HasTags;

    /**
     * @var bool
     */
    protected $truncated = false;

    /**
     * @var array
     */
    protected $guarded = [];

    /**
     * @var array
     */
    protected $casts = [
        'is_published'  => 'bool',
        'is_featured'   => 'bool',
        'project_title' => 'string',
    ];

    /**
     * @var array
     */
    protected $imageOptions = [
        'fetch_format' => 'png',
        'width'        => 'auto',
        'crop'         => 'fit',
    ];

    /**
     * @var array
     */
    protected $dates = ['published_at'];

    protected $appends = ['minutes_to_read'];

    /**
     * Boot
     */
    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::creating(function($blog) {
            $blog->slug = Str::slug($blog->title);
            $blog->user_id = Auth::check() ? Auth::id() : 1;
        });

        static::created(function ($blog) {
            Twitter::postTweet(['status' => $blog->title . "\n" . $blog->shareUrl(), 'format' => 'json']);
        });
    }

    /**
     * @return string
     */
    public function getRouteKeyName()
    {
        return 'slug';
    }

    /**
     * @param $value
     */
    public function setProjectTitleAttribute($value)
    {
        $this->attributes['project_title'] = !is_null($value) && strlen($value) > 1
            ? $value
            : $this->blogTitleToProjectTitle();
    }

    /**
     * @return mixed
     */
    private function blogTitleToProjectTitle()
    {
        return str_replace($this->titleSearchTerms(), $this->titleReplaceTerms(), $this->title);
    }

    /**
     * @return array
     */
    private function titleSearchTerms()
    {
        return [
            'Website Launched',
            'Website Released',
            'Released',
        ];
    }

    /**
     * @return string
     */
    private function titleReplaceTerms()
    {
        return '';
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function category()
    {
        return $this->belongsTo(Category::class);
    }

    /**
     * @return bool
     */
    public function publish()
    {
        return $this->update(['is_published' => true, 'published_at' => now()]);
    }

    /**
     * @return bool
     */
    public function unpublish()
    {
        return $this->update(['is_published' => false]);
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function user()
    {
        return $this->belongsTo(User::class);
    }

    /**
     * @param $value
     */
    public function setPublishedAtAttribute($value)
    {
        $this->attributes['published_at'] = !is_null($value) ? $value : now();
    }

    /**
     * @param $query
     *
     * @return mixed
     */
    public function scopePublished($query)
    {
        return Auth::check() && Auth::user()->isAdmin()
            ? $query
            : $query->where([
                ['is_published', '=', true],
                ['published_at', '<=', now()],
            ]);
    }


    /**
     * @return string
     */
    public function preview()
    {
        return strip_tags(
            substr($this->toHtml(), 0, 100)
               ) . '...';
    }

    /**
     * @return string
     */
    public function toHtml()
    {
        return (new \Parsedown)->text(
            $this->truncated
                ? substr($this->body, 0, 500)
                : $this->body
        );
    }

    /**
     * @return $this
     */
    public function truncated()
    {
        $this->truncated = true;

        return $this;
    }

    /**
     * @return float
     */
    public function minutesToRead()
    {
        return ceil(str_word_count($this->body) / 300);
    }

    /**
     * @return float
     */
    public function getMinutesToReadAttribute()
    {
        return $this->minutesToRead();
    }

    /**
     * @return string
     */
    public function shareUrl()
    {
        return route('blog.show', $this->slug);
    }

    /**
     * @return string
     */
    public function imageUrl($options = [])
    {
        return request()->secure()
            ? Cloudder::secureShow($this->image, array_merge($this->imageOptions, $options))
            : Cloudder::show($this->image, array_merge($this->imageOptions, $options));
    }
}
